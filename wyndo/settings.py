"""
Django's settings for wyndo project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import json
import os
from os import getenv
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv("DEBUG")

ALLOWED_HOSTS = getenv("DJANGO_ALLOWED_HOSTS").split(" ")
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_beat",
    "django_celery_results",
    "django_admin_inline_paginator",
    "rangefilter",
    "admin_auto_filters",
    "django_db_logger",
    "storages",
    "accounts",
    "retailer",
    "shopper",
    "inventories",
    "ckeditor",
    "articles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "wyndo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
            BASE_DIR / "accounts" / "templates",
            BASE_DIR / "shopper" / "templates",
            BASE_DIR / "retailer" / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wyndo.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": getenv("RDS_DB_NAME"),
        "USER": getenv("RDS_USERNAME"),
        "PASSWORD": getenv("RDS_PASSWORD"),
        "HOST": getenv("RDS_HOSTNAME"),
        "PORT": getenv("RDS_PORT"),
    }
}

# User substitution
# https://docs.djangoproject.com/en/1.11/topics/auth/customizing/#auth-custom-user

AUTH_USER_MODEL = "accounts.User"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "wyndo.validators.UppercaseValidator",
    },
    {
        "NAME": "wyndo.validators.LowercaseValidator",
    },
    {
        "NAME": "wyndo.validators.NumberValidator",
    },
]

# redis configuration
REDIS_URL = getenv("REDIS_URL")

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        "KEY_PREFIX": "wyndo",
    }
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static/")]

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"

LOG_LEVEL = "DEBUG" if DEBUG else "INFO"
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "%(levelname)s %(asctime)s %(name)s %(module)s %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": LOG_LEVEL,
            "class": "logging.StreamHandler",
            "formatter": "default",
        },
        "db_log": {
            "level": "ERROR",
            "class": "django_db_logger.db_log_handler.DatabaseLogHandler",
            "formatter": "default",
        },
    },
    "loggers": {
        "": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
            "propagate": True,
        },
        "django.request": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
            "propagate": True,
        },
        "django.security": {
            "handlers": [
                "console",
            ],  # 'mail_admins'
            "level": LOG_LEVEL,
            "propagate": True,
        },
    },
}

if "AWS_STORAGE_BUCKET_NAME" in os.environ:
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    AWS_STORAGE_BUCKET_NAME = os.environ["AWS_STORAGE_BUCKET_NAME"]
    AWS_S3_REGION_NAME = os.environ["AWS_S3_REGION_NAME"]

    AWS_S3_ACCESS_KEY_ID = os.environ["AWS_ACCESS_KEY_ID"]
    AWS_S3_SECRET_ACCESS_KEY = os.environ["AWS_SECRET_ACCESS_KEY"]
    AWS_QUERYSTRING_AUTH = False

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = getenv("MAIL_HOST")
EMAIL_USE_TLS = getenv("MAIL_USE_TLS")
EMAIL_PORT = getenv("MAIL_PORT")
# EMAIL_USE_SSL = getenv('MAIL_USE_SSL')
EMAIL_HOST_USER = getenv("MAIL_HOST_USER")
EMAIL_HOST_PASSWORD = getenv("MAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = getenv("MAIL_FROM")
EMAIL_FILE_PATH = BASE_DIR / "sent_emails"

# celery configuration
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = getenv("CELERY_TIMEZONE")
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = getenv(
    "CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP"
)

# Clover Settings
CLOVER_API_KEY = getenv("CLOVER_API_KEY")
CLOVER_API_SECRET = getenv("CLOVER_API_SECRET")
CLOVER_URL = getenv("CLOVER_URL")
CLOVER_HEADERS = headers = {
    "accept": "application/json",
    "authorization": "Bearer {bearer_token}",
}
CLOVER_OAUTH_PATH = "/oauth/v2/authorize"
CLOVER_MERCHANT_INFO_PATH = "/v3/merchants/{mId}"
CLOVER_TOKEN_PATH = "/oauth/v2/token"
CLOVER_LOCATION_PATH = "/v3/merchants/{mId}/address"

# Square Settings
SQUARE_API_KEY = getenv("SQUARE_API_KEY")
SQUARE_API_SECRET = getenv("SQUARE_API_SECRET")
SQUARE_URL = getenv("SQUARE_URL")
SQUARE_OAUTH_PATH = "/oauth2/authorize"
SQUARE_ENVIRONMENT = getenv("SQUARE_ENVIRONMENT")
SQUARE_WEBHOOK_SIGNATURE_KEY = getenv("SQUARE_WEBHOOK_SIGNATURE_KEY")

# CKEditor Settings
CKEDITOR_CONFIGS = {
    "content": {
        "toolbar": "Custom",
        "toolbar_Custom": [
            [
                "Bold",
                "Italic",
                "Underline",
                "Strike",
                "Subscript",
                "Superscript",
                "-",
                "RemoveFormat",
            ],
            [
                "NumberedList",
                "BulletedList",
                "-",
                "Outdent",
                "Indent",
                "-",
                "Blockquote",
                "CreateDiv",
                "-",
                "JustifyLeft",
                "JustifyCenter",
                "JustifyRight",
                "JustifyBlock",
            ],
            ["Link", "Unlink", "Anchor"],
            ["TextColor", "BGColor"],
            ["Format", "Font", "FontSize"],
        ],
        "toolbarCanCollapse": True,
        "width": "90%",
    },
}

SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 1209600
SESSION_SAVE_EVERY_REQUEST = True
RETAILER_PERMISSION_GROUP_NAME = getenv("RETAILER_PERMISSION_GROUP_NAME", "Retailer_Permission_Group")
DEFAULT_RETAILER_PERMISSION_GROUP_DATA = [
    {
        "app_label": "inventories",
        "model": "inventory",
        "codes": [
            "view_inventory",
        ]
    },
    {
        "app_label": "inventories",
        "model": "product",
        "codes": [
            "view_product",
            "change_product",
        ],
        "inventories": "view_product"
    },
    {
        "app_label": "inventories",
        "model": "variant",
        "codes": [
            "view_variant",
            "change_variant",
        ]
    },
    {
        "app_label": "inventories",
        "model": "variantimage",
        "codes": [
            "view_variantimage",
            "add_variantimage",
            "change_variantimage",
            "delete_variantimage",
        ]
    },
    {
        "app_label": "inventories",
        "model": "order",
        "codes": [
            "view_order",
        ]
    },
    {
        "app_label": "inventories",
        "model": "reservation",
        "codes": [
            "view_reservation",
            "delete_reservation",
        ]
    },
    {
        "app_label": "inventories",
        "model": "customer",
        "codes": [
            "view_customer",
        ]
    },
    {
        "app_label": "inventories",
        "model": "orderitem",
        "codes": [
            "view_orderitem",
        ]
    },
    {
        "app_label": "inventories",
        "model": "orderpickup",
        "codes": [
            "view_orderpickup",
        ]
    },
    {
        "app_label": "inventories",
        "model": "category",
        "codes": [
            "view_category",
        ]
    },
]
RETAILER_PERMISSION_GROUP_DATA = json.loads(getenv("RETAILER_PERMISSION_GROUP_CODES", "[]"))
if len(RETAILER_PERMISSION_GROUP_DATA) == 0:
    RETAILER_PERMISSION_GROUP_DATA = DEFAULT_RETAILER_PERMISSION_GROUP_DATA


LOGIN_URL = "/login/"